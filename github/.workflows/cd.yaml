name: Deploy to PyPI
on:
  push:
    branches:
      - main
      - master
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Set up uv
        uses: astral-sh/setup-uv@v6
      - name: Set up dev dependencies
        run: |
          uv sync
      - name: Run build
        run: |
          uv build
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      - name: Get latest version
        id: get_version
        run: |
          # Get the latest tag
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          # Remove 'v' prefix if exists
          latest_tag=${latest_tag#v}
          # Split into major, minor, patch
          IFS='.' read -r major minor patch <<< "$latest_tag"
          # Increment patch version
          new_patch=$((patch + 1))
          new_version="$major.$minor.$new_patch"
          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
      - name: Build package
        run: python -m build
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m twine upload dist/*
      - name: Create and push new tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${{ env.NEW_VERSION }}" -m "Release v${{ env.NEW_VERSION }}"
          git push origin "v${{ env.NEW_VERSION }}"
